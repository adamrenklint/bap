## API

- All objects are based on [ampersand-state](https://github.com/AmpersandJS/ampersand-state)
- ```on(name, callback)``` register event callback
- ```off(name, [callback])``` unregister event callback
- ```once(name, callback)``` register single-run event callback
- ```with(params)``` return a clone of itself with params
- ```toJSON()``` return current params as JSON

### bap

- ```clock``` reference to [clock](#clock) singleton
- ```volume``` number between 0 and 999, master volume setting, defaults to 100
- ```kit(params)``` returns a new [kit](#kit)
- ```slot(params)``` returns a new [slot](#slot)
- ```layer(params)``` returns a new [layer](#layer)
- ```oscillator(params)``` returns a new [oscillator](#oscillator)
- ```sample(params)``` returns a new [sample](#sample)
- ```pattern(params)``` returns a new [pattern](#pattern)
- ```sequence(sequence..., params)``` returns a new [sequence](#sequence)
- ```channel(params)``` returns a new [channel](#channel)
- ```note(params)``` returns a new [note](#note)
- ```reverb(params)``` returns a new [reverb](#reverb)
- ```delay(params)``` returns a new [delay](#delay)
- ```compressor(params)``` returns a new [compressor](#compressor)
- ```overdrive(params)``` returns a new [overdrive](#overdrive)

#### params

- ```mute``` boolean, defaults to ```false```
- ```volume``` number between ```0``` and ```999```, defaults to ```100```
- ```length``` number, length in seconds, overriden by duration if shorter
- ```duration``` number, duration in ticks, overriden by length if shorter
- ```attack``` number, attack in seconds
- ```release``` number, release in seconds
- ```pitch``` number between ```-999``` and ```999``` representing the pitch shift in percent, defaults to ```0```
- ```pan``` number between ```-100``` and ```100```, defaults to ```0```

### clock

- ```playing``` boolean, current state of playback, can be changed to start or pause
- ```position``` string in format ```bar.beat.tick```, can be set to move playback position
- ```bar```, ```beat```, ```tick``` numbers, equal and bound to position, can be set to move playback position
- ```tempo``` number, current tempo of playback, read only
- ```step``` function, called on each step with note and time as arguments, able to cancel step by returning false
- ```sequence``` pattern or sequence currently playing
- ```start()``` start playback, if current pattern is set
- ```start(pattern)``` set current pattern and start playback
- ```pause()``` stop playback
- ```stop()``` stop playback and set position to ```1.1.01```

### kit

- ```slot()``` returns blank slot assigned to next id
- ```slot(id)``` returns existing or blank slot with id
- ```slot(id, slot)``` assign slot instance to id
- ```slot(slot)``` assign slot instance to next id
- ```connect(effect)``` route output signal to destination via effect or chain
- ```bypass``` boolean to bypass all effects, effect type string or array of strings to bypass specific effect types, defaults to false

### slot

- ```layer()``` returns a blank layer assigned to next id
- ```layer(id)``` returns existing or blank layer with id
- ```layer(id, layer)``` assign layer instance to id
- ```layer(layer)``` assign layer instance to next id
- ```layer(sampleSrc)``` returns a new [sample](#sample) layer, assigned to next id
- ```start(time, [params])``` start playback of slot at (AudioContext) time
- ```start([params])``` start playback of slot immediately
- ```stop(time, [params])``` stop playback of slot at (AudioContext) time
- ```stop([params])``` stop playback of slot immediately
- ```connect(effect)``` route output signal to destination via effect or chain
- ```bypass``` boolean to bypass all effects, effect type string or array of strings to bypass specific effect types, defaults to false

### layer

- ```start(time, [params])``` start playback of slot at (AudioContext) time
- ```start([params])``` start playback of slot immediately
- ```connect(effect)``` route output signal to destination via effect or chain
- ```bypass``` boolean to bypass all effects, effect type string or array of strings to bypass specific effect types, defaults to false

#### oscillator

- ```frequency``` number, frequency of oscillation in hertz, defaults to ```0```
- ```note``` string, [note identifier](https://github.com/gre/audio-notes) like ```C3``` or ```a4``` - if set, overrides frequency
- ```shape``` string, shape of waveform, defaults to ```sine```, other values are ```square```, ```sawtooth```, ```triangle``` and ```custom```

#### sample

- ```src``` string, url used to load sample buffer
- ```offset``` number, starting point offset in seconds, defaults to ```0```
- ```channel``` string, defines how to handle stereo buffers: ```left``` or ```right``` uses a single channel, ```merge``` and ```diff``` combines or differentates between channels, default is ```null``` and does nothing
- ```reverse``` boolean, reverse buffer or slice of buffer
- ```loop``` number, loop length in seconds, defaults to ```0``` i.e. not looping
- ```slice(pieces)``` returns a kit with the sample sliced into even-sized sections
- ```bitcrush``` number between 0 and 16, resamples waveform to defined bit depth, defaults to ```0```, i.e. no resampling
- ```bitcrushFrequency``` number between 20 and 22050, normalization frequency at which to apply the bitcrusher effect, defaults to 6500
- ```bitcrushMix``` number between 0 and 100, ratio of wet bitcrushed signal to mix with dry signal, defaults to 50
- ```trimToZeroCrossingPoint``` boolean, automatically trim sample start and end to zero crossing point to avoid clipping, defaults to true

### pattern

- ```playing``` boolean, current state of playback, can be changed to start or pause
- ```tempo``` number, playback tempo in bpm, defaults to 120
- ```bars``` number, length of pattern in bars, defaults to 1
- ```beatsPerBar``` number, amount of beats per bar, defaults to 4
- ```loop``` boolean, define if pattern should loop, defaults to true
- ```volume``` number between 0 and 999, master volume for pattern, defaults to 100
- ```transform``` function to be called after expanding position expressions into notes, called after ```channel.transform```
- ```channel()``` returns a blank channel assigned to next id
- ```channel(id)``` returns existing or blank channel with id
- ```channel(id, channel)``` assign channel instance to id
- ```channel(channel)``` assign channel instance to next id
- ```start()``` start playback of pattern
- ```pause()``` stop playback
- ```stop()``` stop playback and set position to ```1.1.01```
- ```kit(id, kit)``` connect kit to id
- ```kit(id)``` return kit connected to id
- ```then(sequence, ...)``` return new sequence with passed sequences and patterns after pattern
- ```after(sequence, ...)``` return new sequence with passed sequences and patterns before pattern
- ```and(sequence, ...)``` return new sequence with passed sequences and patterns layered with pattern

### sequence

- ```constructor(sequence, ..., [params])``` the sequence constructor optionally takes any number of sequences and patterns as argument before the usual params
- ```playing``` boolean, current state of playback, can be changed to start or pause
- ```loop``` boolean, define if sequence should loop, defaults to false
- ```sequences``` an array of sequences, patterns or arrays of sequences and patterns
- ```bars``` number, length in bars, read-only
- ```then(sequence, ...)``` return new sequence with passed sequences and patterns after sequence
- ```after(sequence, ...)``` return new sequence with passed sequences and patterns before sequence
- ```and(sequence, ...)``` return new sequence with passed sequences and patterns layered with sequence

### channel

- ```transform``` function to be called after expanding position expressions into notes, called after ```note.transform```, can return ```false``` to not execute ```pattern.transform```
- ```add(note, note, ...)``` schedule note(s) to be played within context of channel
- ```connect(effect)``` route output signal to destination via effect or chain
- ```bypass``` boolean to bypass all effects, effect type string or array of strings to bypass specific effect types, defaults to false

### note

- ```transform``` function to be called after expanding position expressions into notes, called before ```channel.transform```, can return ```false``` to not execute ```channel.transform```
- ```start([time])``` start playback of note at (AudioContext) time or immediately
- ```stop([time])``` stop playback of note at (AudioContext) time or immediately
- ```connect(effect)``` route output signal to destination via effect or chain
- ```bypass``` boolean to bypass all effects, effect type string or array of strings to bypass specific effect types, defaults to false

### reverb

- ```wet``` number between 0 and 999, amount of wet signal, defaults to 30
- ```dry``` number between 0 and 999, amount of dry signal, defaults to 100
- ```time``` number, impulse time in seconds, defaults to 1
- ```decay``` number, drop off time in seconds, defaults to 3
- ```filter``` string, type of filter (highpass, lowpass, bandpass, lowshelf, highshelf, peaking, notch, allpass), defaults to highpass
- ```cutoff``` number, frequency where filter is applied, defaults to 2000
- ```reverse``` boolean, defaults to false
- ```bypass``` boolean, defaults to false

### delay

- ```wet``` number between 0 and 999, amount of wet signal, defaults to 50
- ```dry``` number between 0 and 999, amount of dry signal, defaults to 100
- ```sync``` boolean, sync delay with current tempo, defaults to false
- ```time``` number between 0.001 and 4, delay time in seconds (or beats if sync is true), defaults to 0.3
- ```feedback``` number between 0 and 999, amount of regeneration from processed signal, defaults to 50
- ```filter``` string, type of filter (highpass, lowpass, bandpass, lowshelf, highshelf, peaking, notch, allpass), defaults to highpass
- ```cutoff``` number, frequency where filter is applied, defaults to 2000
- ```bypass``` boolean, defaults to false

### compressor

- ```threshold``` number between -100 and 0, decibel value above which the compression will start taking effect, defaults to -12
- ```knee``` number between 0 and 40, decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion, defaults to 30
- ```ratio``` number between 0 and 20, amount of change in dB needed in input for 1 dB change in the output, defaults to 12
- ```attack``` number, seconds required to reduce the gain by 10 dB, defaults to 0
- ```release``` number, seconds required to increase the gain by 10 dB, defaults to 0.25
- ```gain``` number between 0 and 999, amount of gain to processed signal, defaults to 100
- ```bypass``` boolean, defaults to false

### overdrive

- ```wet``` number between 0 and 999, amount of wet signal, defaults to 50
- ```dry``` number between 0 and 999, amount of dry signal, defaults to 50
- ```preBand``` number between 0 and 100, amount of preband filtering, defaults to 50
- ```color``` number between 20 and 22050, frequency cutoff for preband filtering, defaults to 800
- ```postCut``` number between 20 and 22050, frequency cutoff for post filter, defaults to 3000
- ```gain``` number between 0 and 999, amount of gain to processed signal, defaults to 100
- ```bypass``` boolean, defaults to false

### filter

- based on  [BiquadFilterNode](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode)
- ```wet``` number between 0 and 999, amount of wet signal, defaults to 50
- ```dry``` number between 0 and 999, amount of dry signal, defaults to 50
- ```shape``` string, type of filter (highpass, lowpass, bandpass, lowshelf, highshelf, peaking, notch, allpass), defaults to highpass
- ```frequency``` number between 20 and 22050, frequency at which to apply effect, defaults to 440
- ```q``` number between 0.001 and 100, controls the frequency band width or peak at cutoff, defaults to 1
- ```value``` number between -999 and 999, amount of gain to affected frequency band, defaults to 0
- ```gain``` number between 0 and 999, amount of gain to processed signal, defaults to 100
- ```bypass``` boolean, defaults to false

### chorus

- ```wet``` number between 0 and 999, amount of wet signal, defaults to 50
- ```dry``` number between 0 and 999, amount of dry signal, defaults to 50
- ```rate``` number between 0.01 and 99, defaults to 1.5
- ```feedback``` number between 0 and 999, defaults to 0.2
- ```delay``` number between 0 and 1, defaults to 0.005
- ```gain``` number between 0 and 999, amount of gain to processed signal, defaults to 100
- ```bypass``` boolean, defaults to false
